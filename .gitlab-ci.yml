image:
  name: hashicorp/terraform:light
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

variables:
  TF_ROOT: ${CI_PROJECT_DIR}/terraform
  CLOUD_SDK_IMAGE: google/cloud-sdk:slim

cache:
  key: ${TF_ROOT}
  paths:
    - ${TF_ROOT}/.terraform/

before_script:
  - terraform --version
  - cd ${TF_ROOT}
  - mkdir -p ./creds
  - echo $GCP_SERVICE_ACCOUNT_KEY > ./creds/serviceaccount.json
  - if [[ $ENVIRONMENT == "dev" ]]; then sed -i "s/ENVIRONMENT/dev/" backend.tf ; fi
  - if [[ $ENVIRONMENT == "test" ]]; then sed -i "s/ENVIRONMENT/test/" backend.tf ; fi
  - if [[ $ENVIRONMENT == "prod" ]]; then sed -i "s/ENVIRONMENT/prod/" backend.tf ; fi
  - terraform init

stages:
  - gke-deploy
  - tf-validate
  - tf-plan
  - tf-apply

############### gke cluster deploy #################
.gke-deploy:
  image: ${CLOUD_SDK_IMAGE}
  stage: gke-deploy
  script:
    - gcloud config set project ${GCP_PROJECT_ID}
    - gcloud config set compute/zone europe-west1-b
    - gcloud container clusters create ${CLUSTER_NAME} --num-nodes=2 --network ${VPC_NETWORK}
  when: manual

gke-deploy-dev:
  extends:
    - .gke-deploy
  before_script:
    - gcloud auth activate-service-account --key-file ${GCP_SERVICE_ACCOUNT_KEY_DEV}
  variables:
    GCP_PROJECT_ID: ${GCP_PROJECT_DEV}
    CLUSTER_NAME: my-fastapi-node
    VPC_NETWORK: vpc-mainnet
  except:
    - master
    - /^release.*$/
    - /^hotfix.*$/
    - tags

############### terraform validate #################
.tf-validate:
  stage: tf-validate
  script:
    - terraform validate
  when: manual

tf-validate-dev:
  extends:
    - .tf-validate
  variables:
    GCP_PROJECT_ID: ${GCP_PROJECT_DEV}
    GCP_SERVICE_ACCOUNT_KEY: ${GCP_SERVICE_ACCOUNT_KEY_DEV}
    ENVIRONMENT: "dev"
  except:
    - master
    - /^release.*$/
    - /^hotfix.*$/
    - tags

tf-validate-prod:
  extends:
    - .tf-validate
  variables:
    GCP_PROJECT_ID: ${ GCP_PROJECT_PROD}
    GCP_SERVICE_ACCOUNT_KEY: ${GCP_SERVICE_ACCOUNT_KEY_PROD}
    ENVIRONMENT: "prod"
  only:
    - master

############### terraform plan #################
.tf-plan:
  stage: tf-plan
  script:
    - terraform plan -var-file=./${ENVIRONMENT}.tfvars
  artifacts:
    paths:
      - ${TF_ROOT}/creds
  when: manual

tf-plan-dev:
  extends:
    - .tf-plan
  variables:
    GCP_PROJECT_ID: ${GCP_PROJECT_DEV}
    GCP_SERVICE_ACCOUNT_KEY: ${GCP_SERVICE_ACCOUNT_KEY_DEV}
    ENVIRONMENT: "dev"
  except:
    - master
    - /^release.*$/
    - /^hotfix.*$/
    - tags

tf-plan-prod:
  extends:
    - .tf-plan
  variables:
    GCP_PROJECT_ID: ${GCP_PROJECT_PROD}
    GCP_SERVICE_ACCOUNT_KEY: ${GCP_SERVICE_ACCOUNT_KEY_PROD}
    ENVIRONMENT: "prod"
  only:
    - master

############### terraform apply #################
.tf-apply:
  stage: tf-apply
  script:
    - terraform apply -var-file=./${ENVIRONMENT}.tfvars -auto-approve
  when: manual

tf-apply-dev:
  extends:
    - .tf-apply
  variables:
    GCP_PROJECT_ID: ${GCP_PROJECT_DEV}
    GCP_SERVICE_ACCOUNT_KEY: ${GCP_SERVICE_ACCOUNT_KEY_DEV}
    ENVIRONMENT: "dev"
  except:
    - master
    - /^release.*$/
    - /^hotfix.*$/
    - tags

tf-apply-prod:
  extends:
    - .tf-apply
  variables:
    GCP_PROJECT_ID: ${GCP_PROJECT_PROD}
    GCP_SERVICE_ACCOUNT_KEY: ${GCP_SERVICE_ACCOUNT_KEY_PROD}
    ENVIRONMENT: "prod"
  only:
    - master
